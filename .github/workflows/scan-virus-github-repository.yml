# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Scan Virus - GitHub Repository"
on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:
    inputs:
      repositories:
        type: "string"
        description: "{String[]} GitHub repositories."
        required: false
concurrency:
  group: "scan-virus-github-repository"
  cancel-in-progress: false
jobs:
  resolve-repositories:
    name: "(Resolve Repositories)"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Setup PowerShell Toolkit"
        uses: "hugoalh-studio/setup-powershell-toolkit-ghaction@v1.4.1"
        with:
          version: "^1.7.1"
      - name: "Get Timestamp"
        id: "timestamp"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [String]$Timestamp = (
            Get-Date -AsUTC |
              ConvertTo-Json
          ) -ireplace '"', '' -ireplace '\.\d+Z$', 'Z'
          Set-GitHubActionsOutput -Name 'iso' -Value $Timestamp
          Set-GitHubActionsOutput -Name 'id' -Value ($Timestamp -ireplace '\D', '')
        shell: "pwsh"
      - name: "Restore RDB"
        uses: "actions/cache/restore@v3.3.1"
        with:
          key: "rdb-${{steps.timestamp.outputs.id}}"
          path: "${{github.workspace}}"
          restore-keys: |
            rdb-
      - name: "Resolve Repositories"
        id: "resolve-repositories"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [Hashtable]$Rdb = @{}
          [Int16]$MatrixMaximum = 250
          [DateTime]$TimeStampCurrent = Get-Date -Date '${{steps.timestamp.outputs.iso}}' -AsUTC
          [DateTime]$TimeStampBuffer = $TimeStampCurrent.AddDays(-7)
          [String]$RdbFilePath = Join-Path -Path $Env:GITHUB_WORKSPACE -ChildPath 'rdb.json'
          If (Test-Path -LiteralPath $RdbFilePath) {
            $Rdb = Get-Content -LiteralPath $RdbFilePath -Raw -Encoding 'UTF8NoBOM' |
              ConvertFrom-Json -Depth 100 -AsHashtable -ErrorAction 'Continue'
          }
          [String]$RepositoriesInput = '${{github.event.inputs.repositories}}'
          [String[]]$RepositoriesRaw = @()
          If ($RepositoriesInput.Length -eq 0) {
            For ([UInt64]$Page = 1; $Page -le 3; $Page += 1) {
              Try {
                [PSCustomObject[]]$Response = Invoke-WebRequest -Uri "$($Env:GITHUB_API_URL)/events?page=$($Page)&per_page=100" -Headers @{
                  'Content-Type' = 'application/vnd.github+json'
                  'X-GitHub-Api-Version' = '2022-11-28'
                } -MaximumRedirection 1 -MaximumRetryCount 2 -RetryIntervalSec 5 -Method 'Get' |
                  Select-Object -ExpandProperty 'Content' |
                  ConvertFrom-Json -Depth 100
                $RepositoriesRaw += $Response.repo.name
              }
              Catch {}
            }
          }
          Else {
            $RepositoriesRaw += $RepositoriesInput -isplit ',|;' |
              ForEach-Object -Process { $_.Trim() } |
              Where-Object -FilterScript { $_.Length -gt 0 }
          }
          [String[]]$Repositories = $RepositoriesRaw |
            Where-Object -FilterScript { $_ -inotmatch '^hugoalh(?:-studio)?\/' } |
            Select-Object -Unique |
            Where-Object -FilterScript {
              !$Rdb.ContainsKey($_) -or
              ($Rdb.ContainsKey($_) -and $Rdb.($_) -lt $TimeStampBuffer )
            } |
            Get-Random -Count $MatrixMaximum
          If ($Repositories.Count -lt $MatrixMaximum) {
            $Repositories += $Rdb.GetEnumerator() |
              Where-Object -FilterScript { $_.Name -inotin $Repositories -and $_.Value -lt $TimeStampBuffer } |
              Get-Random -Count ($MatrixMaximum - $Repositories.Count) |
              Select-Object -ExpandProperty 'Name'
          }
          ForEach ($Repository In $Repositories) {
            $Rdb.($Repository) = $TimeStampCurrent
          }
          $Rdb |
            ConvertTo-Json -Depth 100 -Compress |
            Set-Content -LiteralPath $RdbFilePath -Encoding 'UTF8NoBOM' -ErrorAction 'Continue'
          Set-GitHubActionsOutput -Name 'group' -Value (
            $Repositories |
              ConvertTo-Json -Depth 100 -Compress
          )
        shell: "pwsh"
      - name: "Save RDB"
        uses: "actions/cache/save@v3.3.1"
        with:
          key: "rdb-${{steps.timestamp.outputs.id}}"
          path: "${{github.workspace}}"
        continue-on-error: true
    outputs:
      group: "${{steps.resolve-repositories.outputs.group}}"
  main:
    name: "${{matrix.group}}"
    needs:
      - "resolve-repositories"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        group: "${{fromJson(needs.resolve-repositories.outputs.group)}}"
      fail-fast: false
    steps:
      - name: "Determine Whether Optimize Disk Space"
        id: "if-ods"
        run: |
          [Boolean]$NeedMoreSpace = $True
          Try {
            $Response = Invoke-WebRequest -Uri "$($Env:GITHUB_API_URL)/repos/${{matrix.group}}" -Headers @{
              'Content-Type' = 'application/vnd.github+json'
              'X-GitHub-Api-Version' = '2022-11-28'
            } -MaximumRedirection 1 -MaximumRetryCount 2 -RetryIntervalSec 5 -Method 'Get' -SkipHttpErrorCheck
            If ($Response.StatusCode -eq 200) {
              $NeedMoreSpace = (
                $Response |
                  Select-Object -ExpandProperty 'Content' |
                  ConvertFrom-Json -Depth 100 |
                  Select-Object -ExpandProperty 'size'
              ) -ge (8GB / 1KB)
            }
          }
          Catch {}
          Add-Content -LiteralPath $Env:GITHUB_OUTPUT -Value "result=$($NeedMoreSpace.ToString())" -Confirm:$False -Encoding 'UTF8NoBOM'
        shell: "pwsh"
        continue-on-error: true
      - name: "Optimize Disk Space"
        if: "${{(steps.if-ods.outputs.result || 'True') == 'True'}}"
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.5.0"
        with:
          operate_async: "True"
          general_include: ".+"
          general_exclude: |-
            ^AzCopy$
            ^Azure
          docker_include: ".+"
          docker_exclude: |-
            ^ghcr\.io/hugoalh/scan-virus-ghaction
          docker_prune: "True"
          apt_prune: "True"
          homebrew_prune: "True"
          npm_prune: "True"
      - name: "Checkout Repository"
        uses: "actions/checkout@v3.5.3"
        with:
          repository: "${{matrix.group}}"
          token: "${{secrets.GHP_SCANVIRUSCLONEREPOSITORY}}"
          fetch-depth: 0
      - name: "Scan Virus"
        uses: "hugoalh/scan-virus-ghaction/clamav@v0.16.1"
        with:
          git_integrate: "True"
          git_limit: "30"
          ignores: |-
            - Path: "^\\.git\\/"
              Symbol: ".+"
          log_elements: "OnlyCurrent"
